//------------------------------------------------------------------------------
// SalesManager.CS
// Author: Ethan Bartel
// <auto-generated>
//     This code was generated by a tool
//     Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;


/// <summary>
/// SalesManager manages all databases and works with a sales transaction and the User (UI)
/// </summary>
public class SalesManager
{
    /// <summary>
    /// Current Transaction the User is working with
    /// </summary>
    private SalesTransaction Transaction;

    /// <summary>
    /// DataBase to handle Transaction storage and manipulation
    /// </summary>
    private TransactionDB TransactionDB = new TransactionDB();

    /// <summary>
    /// DataBase to handle Rebate storage and mmanipulation
    /// </summary>
    private RebateDB RebateDB = new RebateDB();

    /// <summary>
    /// id of current transaction (counter)
    /// </summary>
    private int id = 100;

	/// <summary>
    /// main method of SaleManager, reactive, asks and handles what user would like to do
    /// </summary>
    public void Sale()
    {
        Console.Write("What would you like to do? (buy) (return) (rebate) (checks) (exit) : ");
        string resp = Console.ReadLine();
        switch (resp)
        {
            case "buy":
                CreateSaleTransaction();
                break;
            case "return":
                Return();
                break;
            case "rebate":
                EnterRebate();
                break;
            case "checks":
                GenerateRebateChecks();
                break;
            case "exit":
                Environment.Exit(0);
                break;
            default:
                Console.WriteLine("Invalid option, please select a valid option");
                break;

        }
    }

    /// <summary>
    /// method for creating a new sales Transaction
    /// </summary>
    private void CreateSaleTransaction()
	{
        decimal price = 0;
        string name = "";
        Transaction = new SalesTransaction();
        Console.Write("Would you like to enter an Item? (y)es (n)o: ");
        char response = Console.ReadLine()[0];
        while (response == 'y')
        {
            Console.Write("Enter the name of the Item: ");
            name = Console.ReadLine();
            Console.Write("Enter the price of the Item: ");
            price = Convert.ToDecimal(Console.ReadLine());
            Transaction.addItem(new Item(name, price));
            Console.WriteLine("Item " + name + " added to cart.");
            Console.Write("Would you like to enter an Item? (y)es (n)o: ");
            response = Console.ReadLine()[0];
        }
        if (Transaction.total > 0)
        {

            id += 1;
            TransactionDB.Transactions.Add(id, Transaction);
            Console.WriteLine();
            Console.WriteLine("RECIEPT:");
            Console.WriteLine("6/15/18 " + DateTime.Now.ToString("h:mm:ss tt"));
            Transaction.printCart();
            Console.WriteLine("Total: $" + Transaction.total);
            Console.WriteLine("Transaction ID: " + id);
            Console.WriteLine("Thank you for shopping with us!");
            Console.WriteLine();
        }
        Transaction = null;
        
	}

    /// <summary>
    /// method for returning an item
    /// </summary>
    private void Return()
    {
        string name;
        decimal price;
        char response;
        decimal total = 0;
        Console.Write("Please enter your Transaction ID: ");
        int tempid = Convert.ToInt32(Console.ReadLine());
        if (TransactionDB.Transactions.TryGetValue(tempid, out Transaction))
        {
            do
            {
                Transaction.printCart();
                Console.Write("Which Item would you like to return: ");
                name = Console.ReadLine();
                price = Transaction.removeItemByName(name);
                total += price;
                if (price != 0)
                {
                    Console.WriteLine("Removed " + name + " for -$" + price);
                }
                Console.Write("Would you like to return another item? (y)es (n)o: ");
                response = Console.ReadLine()[0];
            } while (response == 'y');
            Console.WriteLine("Your total return is: $" + total);
            Console.WriteLine();

        }
        else
        {
            Console.WriteLine("Not a valid Transaction ID");
        }
        Transaction = null;

    }

    /// <summary>
    /// method for entering a rebate that has been mailed in using a previous Transaction
    /// </summary>
    private void EnterRebate()
    {
        string name;
        string address;
        Console.Write("Please Enter your Transaction ID: ");
        int tempid = Convert.ToInt32(Console.ReadLine());
        if (TransactionDB.Transactions.TryGetValue(tempid, out Transaction))
        {
            Console.Write("Please enter your name: ");
            name = Console.ReadLine();
            Console.Write("Please enter your address: ");
            address = Console.ReadLine();
            RebateDB.addRebate(tempid, name, address);
            Console.WriteLine("Rebate Generated");
            Console.WriteLine("Your Rebate Check will be sent at the end of the month");
            Console.WriteLine();
        }
        else
        {
            Console.WriteLine("Not a valid Transaction ID");
        }
        Transaction = null;
    }

    /// <summary>
    /// Method to generate all rebate checks for past rebates at the end of the promotion
    /// </summary>
    private void GenerateRebateChecks()
    {
        if (RebateDB.rebates.Count == 0)
        {
            Console.WriteLine("There are currently no entered rebates.");
        }
        else
        {
            foreach (Rebate r in RebateDB.rebates)
            {
                if (TransactionDB.Transactions.TryGetValue(r.id, out Transaction))
                {
                    RebateDB.addRebateCheck(Transaction.total, r.name, r.address);
                }
            }

            Console.WriteLine("Rebate Checks Generated");
        }
        Console.WriteLine();
    }

}

